<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/hexo%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html"/>
      <url>/hexo%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-new-文章名字"><a href="#hexo-new-文章名字" class="headerlink" title="hexo new 文章名字"></a>hexo new 文章名字</h3><p>新建文章，如果文章名字中含有空格，则需要””将文件名字括起来。hexo 会将空格用-补全，但在页面上看起来是空格。注意引号是英文状态下。</p><h3 id="hexo-generate-生成静态文件"><a href="#hexo-generate-生成静态文件" class="headerlink" title="hexo generate 生成静态文件"></a>hexo generate 生成静态文件</h3><p>将文件放到public下。这些文件后期会上传到服务器上用来访问，也可以在本地打来看。可简写为:    hexo g</p><h3 id="hexo-server-启动服务器"><a href="#hexo-server-启动服务器" class="headerlink" title="hexo server 启动服务器"></a>hexo server 启动服务器</h3><p>简写：hexo s</p><p>hexo s -p 1234</p><p>启动服务器时，修改端口</p><h3 id="hexo-deploy-部署网站"><a href="#hexo-deploy-部署网站" class="headerlink" title="hexo deploy 部署网站"></a>hexo deploy 部署网站</h3><p>简写：hexo d</p><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p>会将public/db.json 两个文件夹清除。在某些情况下（尤其是更换主题后），如果发现对博客的更改无论如何也不生效，则可能需要运行该命令。</p><h3 id="hexo-version-显示hexo版本"><a href="#hexo-version-显示hexo版本" class="headerlink" title="hexo version 显示hexo版本"></a>hexo version 显示hexo版本</h3><p>简写：hexo -v</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>demo</title>
      <link href="/demo.html"/>
      <url>/demo.html</url>
      
        <content type="html"><![CDATA[<p>111111<br><img src="/images/p1.jpg" alt="000"><br>222222</p><p><img src="/images/%E5%90%84%E4%B8%AA%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90.png" alt="111111"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/test.html"/>
      <url>/test.html</url>
      
        <content type="html"><![CDATA[<p><img src="/test/C:%5CUsers%5C1%5Cblog%5Csource%5C_posts%5Ctest%5C%E5%9B%BE%E7%89%87%E4%B8%80.jpg" alt="miaoshu" title="图片一.jpg"></p><p>ceshi</p><p>a<img src="/test/C:%5CUsers%5C1%5Cblog%5Csource_posts%5Ctest%5C%E5%9B%BE%E7%89%87%E4%B8%80.jpg" alt="111"></p><p>aaaa图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA的基础知识</title>
      <link href="/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
      <url>/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</url>
      
        <content type="html"><![CDATA[<h4 id="java具有跨平台性"><a href="#java具有跨平台性" class="headerlink" title="java具有跨平台性"></a>java具有跨平台性</h4><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps1.jpg" alt></p><p><strong>原因就是因为java是运行在jvm上，针对不同的操作系统而jvm是不同的。（即有win版jvm，Mac版jvm，Linux版jvm）</strong></p><p>Jdk（java development kit  开发工具包）包含jre（java runtime environment java运行环境）</p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps2.jpg" alt></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps3.jpg" alt></p><p>**内存结构的简单说明</p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps4.jpg" alt></p><p>int[] arr = new int[]{1,2,3}</p><p>在main中是局部变量，局部变量在栈中，new出来的结构在堆里，且连续存储，一个在栈中，另一个在堆中，如何连续存储呢？其实，在栈中的arr指向堆中数据的首地址例如，首地址为0x34ab，那么栈中arr的值就是0x34ab。一开始在堆中进行分配时，首先划出来3个地址，因为数组是int类型，而int类型占4个字节，并赋值0,0,0（二进制，不是0就是1），随后又将0,0,0删掉–》替换成1,2,3。</p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps5.jpg" alt></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps6.jpg" alt></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps7.jpg" alt></p><p><strong>数组元素的默认初始化值、</strong></p><p>Int–》0，浮点型–》0.0，char型–》0或者’\u0000’而非‘0’，数组元素是boolean类型的false，引用数据类型–》null;</p><p><strong>二维数组的使用：</strong></p><p>规定：二维数组分为外层数组的元素，和内层数组的元素</p><p>int [][] arr = new int [4][3];</p><p>外层元素:arr[0],arr[2]…</p><p>内层元素:arr[1][2],arr[3][1]等</p><p><strong>数组元素的默认初始化值</strong></p><p>针对<strong>初始化方式一</strong>：比如int[][]arr=new int[4][3];</p><p><strong>外层</strong>元素的初始化值为：地址值</p><p><strong>内层</strong>元素的初始化值：与一维的数组的初始化方式相同</p><p>针对<strong>初始化方式二</strong>：比如 int[][] arr =new int [4][];</p><p><strong>外层</strong>元素初始化的值为：null;</p><p><strong>内层</strong>元素初始化值为：无从谈起，不能调用，还未初始化。</p><p><strong>二维数组的内存解析</strong></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps8.jpg" alt></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps9.jpg" alt></p><p><img src="/images/JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wps10.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> -JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维及二维数组基础练习题</title>
      <link href="/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
      <url>/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<p>Java 一维及二维数组练习题+详解(java)</p><h4 id="练习题1：创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值，同时，要求元素的值各不同。"><a href="#练习题1：创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值，同时，要求元素的值各不同。" class="headerlink" title="练习题1：创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值，同时，要求元素的值各不同。"></a>练习题1：创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值，同时，要求元素的值各不同。</h4><p>方法一：</p><pre><code class="java">public class testarr {    public static void main(String[] args) {       int[] arr = new  int[6];       for (int i=0;i&lt;arr.length;i++){           arr[i]=1+(int)(Math.*random*()*30);           for(int j=0;j&lt;i;j++){               if (arr[i]==arr[j]){                   i--;                   break;               }           }       }       for (int i=0;i&lt;arr.length;i++){           System.*out*.print(arr[i]+&quot;\t&quot;);       }​    }}</code></pre><p>方法二：</p><pre><code class="java">int[] arr = new int[6];for (int i=0;i&lt;arr.length;i++) {    boolean flag = false;    int num = 1 + (int) (Math.*random*() * 30);    for (int j = 0; j &lt; arr.length; j++) {        if (arr[j] == num) {            flag = true;            break;        }    }    if (flag == true) {        i--;    } else {        arr[i] = num;    }}for (int i=0;i&lt;arr.length;i++){    System.*out*.print(arr[i]+&quot;\t&quot;);}</code></pre><h4 id="练习题2：使用二维数组打印一个10行杨辉三角。"><a href="#练习题2：使用二维数组打印一个10行杨辉三角。" class="headerlink" title="练习题2：使用二维数组打印一个10行杨辉三角。"></a>练习题2：使用二维数组打印一个10行杨辉三角。</h4><p><strong>提示</strong>：</p><ol><li>第一行有1个元素，第n行有n个元素</li><li>每一行的第一个元素和最后一个元素都是1</li><li>从第三行开始，对于非第一个元素和最后一个元素。</li><li>即他们之间的关系为：Yanghui[i][j]=yanghui[i-1][j-1]+yanghui[i-1][j]</li></ol><pre><code class="java">int x=10;//输入几层是几层int num[][] = new int[x][x];//这个数组有几层for(int m=0;m&lt;x;m++)//主要是对数组进行赋值{    for(int n=0;n&lt;=m;n++)//每一层的个数都是小于等于层数的，m代表层数，n代表着第几个数    {        if(n==0||m==n)//每一层的开头都是1，m==n的时候也是1,必须要这个，凡事都得有个开头        {            num[m][n]=1;        }        else            num[m][n]=num[m-1][n-1]+num[m-1][n];//这个就是递推的方法了，例如3=1+2，3的坐标就是3[3,1]=1[2,0]+2[2,1];    }}for(int i=0;i&lt;x;i++)//主要是输出数组{    for(int l=i;l&lt;x;l++)//这个主要是打空格，好看一点，去掉就是直角三角形了    {        System.*out*.print(&quot; &quot;);    }    for(int j=x-i;j&lt;=x;j++)//这个就是打印数组了，每层循环几次就几个    {        System.*out*.print(num[i][x-j]+&quot; &quot;);//不懂的可以把x替换成10，更加清楚点    }    System.*out*.println();//每层换行}</code></pre><h4 id="练习题3："><a href="#练习题3：" class="headerlink" title="练习题3："></a>练习题3：</h4><p>1.求数值型数组中元素的最大值，最小值，平均值，总和等</p><p>2.定义一个int型的一维数组，包含10个元素，分别赋一些两位数随机整数，然后求出所有元素的最大值，最小值，和，平均值，并输出出来。要求：所有的随机数都是两位数。</p><p><strong>分析</strong>：</p><ol><li>如何正确通过Math.random()获得两位数的随机整数。</li><li>两位数即[10,99]—&gt;此范围为闭区间。10标记为A，99标记为B。</li><li>Math.random()<em>(B-A+1)+A—-&gt;此结果为double类型转换为int型</em></li><li><em>(int)(Math.random()</em>(B-A+1)+A).一定要把整个公式用括号括起来！！即(int)后面的必须用另一个全部括起来！千万不要忘记。</li></ol><pre><code class="java">int[] arr = new int[10];int max=0,min=0,sum=0;for(int i=0;i&lt;arr.length;i++){    arr[i]=(int)(Math.*random*()*(99-10+1)+10);    if (i==0){        max=arr[i];        min=arr[i];    }    if (max&lt;arr[i]){        max = arr[i];    }    if (min&gt;arr[i]){        min = arr[i];    }    sum+=arr[i];}for(int i=0;i&lt;arr.length;i++){    System.*out*.print(arr[i]+&quot;\t&quot;);}System.*out*.println(&quot;该数组的最大值:&quot;+max+&quot;,最小值:&quot;+min+&quot;,总和:&quot;+sum+&quot;,平均值:&quot;+(sum/arr.length));</code></pre><h4 id="练习题4："><a href="#练习题4：" class="headerlink" title="练习题4："></a>练习题4：</h4><ol><li><p>创建一个名为ArrayTest的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。</p></li><li><p>使用大括号{}，把array1初始化为8个素数:2,3,5,7,11,13,17,19.</p></li><li><p>显示array1的内容。</p></li><li><p>赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]=0,array[2]=2)，打印出array。</p></li><li><p>思考：array1和array2是什么关系？</p></li></ol><pre><code class="java">public class ArrayTest {    public static void main(String[] args) {        int[] array1 = new int[]{2,3,5,7,11,13,17,19};        int[] array2;        System.*out*.println(&quot;这是第一次显示array1的内容&quot;);        for (int i=0;i&lt;array1.length;i++){            System.*out*.print(array1[i]+&quot;\t&quot;);        }        array2=array1;//这里其实只是把array1的地址给了array2,在堆空间中，只有一个数组,这个操作不能叫做数组的复制，只是数组的赋值。        for (int i=0;i&lt;array2.length;i+=2){            array2[i]=i;        }        System.*out*.println(&quot;这是第二次显示array1的内容&quot;);        for (int i=0;i&lt;array1.length;i++){            System.*out*.print(array1[i]+&quot;\t&quot;);        }    }}</code></pre><p><strong>拓展</strong>：修改题目，实现array2对array1数组的复制。</p><p>//数组的复制<br>array2 = new int[array1.length];<br>for (int i=0;i&lt;array1.length;i++){<br>    array2[i]=array1[i];<br>}</p><h4 id="练习题5："><a href="#练习题5：" class="headerlink" title="练习题5："></a>练习题5：</h4><p>数组的二分法查找（<strong>前提是该数组必须为有序</strong>）</p><pre><code class="java">import java.util.Scanner;public class test {    public static void main(String[] args) {        int[] arr = new int[]{-30,-25,-1,5,6,8,9,45,89,97,108,209};        Scanner sc = new Scanner(System.*in*);        System.*out*.println(&quot;请输入要查找的目标：&quot;);        int target=sc.nextInt();        int head = 0;//头指针        int end = arr.length-1;//尾指针        int middle;//中间点        boolean flag = true;        while (head&lt;=end){//头指针的数值不能大于尾指针            middle=(head+end)/2;            if(arr[middle] ==target){//找到目标                System.*out*.println(&quot;已找到目标，位置为：&quot;+middle);                flag = false;                break;            }else if (arr[middle]&gt;target){//目标比中间点小，说明目标在左侧，所以令end的值等于中间点-1                end = middle-1;​            }else if(arr[middle]&lt;target){//目标比中间点大，说明目标在中间点的右侧​                head=middle+1;​            }​        }​        if(flag==true)​        System.*out*.println(&quot;未找到目标！&quot;);    }}</code></pre><h4 id="练习题6："><a href="#练习题6：" class="headerlink" title="练习题6："></a>练习题6：</h4><p>数组的排序（<strong>重点：冒泡/快排；了解原理：堆排序，并归排序</strong>）</p><p><img src="/images/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.png" alt="排序算法分类"></p><p><img src="/images/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/%E7%AE%97%E6%B3%95%E7%9A%845%E5%A4%A7%E7%89%B9%E5%BE%81.png" alt></p><p><strong>冒泡排序的实现/应用:</strong></p><pre><code class="java">public class BubbleSortTest {    public static void main(String[] args) {        int[] arr = new int[]{2,54,2,5,4,1,47,5,2,-58,-14,-541,-55,78,52,9442};        for (int i=0;i&lt;arr.length-1;i++){//循环/排序 数组长度-1轮            for (int j=0;j&lt;arr.length-1-i;j++){//j&lt;arr.length-1-i  --&gt;保证每一轮最后一个数都不再进行比较                if(arr[j]&gt;arr[j+1]){                    int num = arr[j];                    arr[j] = arr[j+1];                    arr[j+1]=num;                }            }        }        //遍历数组        System.out.println(&quot;排序后的数组为：&quot;);        for (int i=0;i&lt;arr.length;i++){            System.out.print(arr[i]+&quot; &quot;);        }    }}</code></pre><p><strong>快速排序的实现/应用:</strong></p><pre><code class="java">public class QuickSort {    private static void swap(int[] data,int i,int j){        int temp = data[i];        data[i] = data[j];        data[j] = temp;    }    private static void subSort(int[] data,int start,int end){        if(start&lt;end){            int base = data[start];            int low = start;            int high = end +1;            while (true){                while(low&lt;end&amp;&amp;data[++low]-base&lt;=0)                    ;                while (high&gt;start&amp;&amp;data[--high]-base&gt;=0)                    ;                if(low&lt;high){                    swap(data,low,high);                }else{                    break;                }            }            swap(data,start,high);            subSort(data,start,high-1);            subSort(data,high+1,end);        }    }    public static void quickSort(int[] data){        subSort(data,0,data.length-1);    }}</code></pre><p><strong>排序算法性能对比</strong></p><p><img src="/images/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.png" alt="算法的性能对比"></p><p><strong>没有十全十美的算法。</strong></p><p><img src="/images/%E4%B8%80%E7%BB%B4%E5%8F%8A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/%E5%90%84%E4%B8%AA%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA最常用快捷键总结</title>
      <link href="/IDEA%E6%9C%80%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93.html"/>
      <url>/IDEA%E6%9C%80%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<p>复制</p><pre><code>Ctrl+D</code></pre><p>移动</p><pre><code>  Alt+Shift+↑/↓</code></pre><p>删除</p><pre><code>Ctrl+Y</code></pre><p> main方法：</p><pre><code>psvm 也就是public static void main的首字母。</code></pre><p>for循环</p><pre><code>依次还有在方法体内键入for会有一个fori的提示，选中然后tab键，就会自动创建一个for循环。</code></pre><p>System.out.println()</p><pre><code>如何像写一个System.out.println();就是sout</code></pre><p>更多的提示可以CTRL + j 可以查看，mac系统下是command＋j。</p>]]></content>
      
      
      <categories>
          
          <category> -IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小栈</title>
      <link href="/%E6%9C%80%E5%B0%8F%E6%A0%88.html"/>
      <url>/%E6%9C%80%E5%B0%8F%E6%A0%88.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用两个栈"><a href="#使用两个栈" class="headerlink" title="使用两个栈"></a>使用两个栈</h3><p><em>入栈：</em>如果元素小于或者等于最小元素栈顶，则入最小元素栈。<br><em>出栈：</em>如果元素等于最小元素栈顶，则最小元素出栈</p><pre><code>class MinStack {    private Stack&lt;Integer&gt; innerStack;    private Stack&lt;Integer&gt; minStack;    /** initialize your data structure here. */    public MinStack() {        innerStack = new Stack&lt;Integer&gt;();        minStack = new Stack&lt;Integer&gt;();    }    public void push(int x) {        innerStack.push(x);        //add to queue        if (minStack.isEmpty() || x &lt;= minStack.peek()) {            minStack.push(x);        }    }    public Integer pop() {        if (!innerStack.empty()) {            Integer peek = innerStack.pop();            if (peek.equals(minStack.peek())) {                minStack.pop();            }            return peek;        }        return null;    }    public Integer top() {        if (!innerStack.empty()) {            return innerStack.peek();        }        return null;    }    public Integer getMin() {        if (!minStack.empty()) {            return minStack.peek();        }        return null;    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>###delete a file</p><pre><code class="bash">$ rm -f filename</code></pre><p>###delete a 目录</p><pre><code class="bash">rm -rf 目录名称</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
